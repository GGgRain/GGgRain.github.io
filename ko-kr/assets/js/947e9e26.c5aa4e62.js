"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8778],{9834:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>r,contentTitle:()=>a,default:()=>h,frontMatter:()=>s,metadata:()=>d,toc:()=>c});var n=i(5893),o=i(1151);const s={title:"Trying Out Dialogue Conditions",description:"Explore dialogue conditions that control branching and node playback.",sidebar_position:4},a=void 0,d={id:"guide_docs/tutorial/trying-dialogue-conditions/trying-dialogue-conditions",title:"Trying Out Dialogue Conditions",description:"Explore dialogue conditions that control branching and node playback.",source:"@site/docs/guide_docs/tutorial/trying-dialogue-conditions/trying-dialogue-conditions.md",sourceDirName:"guide_docs/tutorial/trying-dialogue-conditions",slug:"/guide_docs/tutorial/trying-dialogue-conditions/",permalink:"/ko-kr/docs/guide_docs/tutorial/trying-dialogue-conditions/",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/guide_docs/tutorial/trying-dialogue-conditions/trying-dialogue-conditions.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{title:"Trying Out Dialogue Conditions",description:"Explore dialogue conditions that control branching and node playback.",sidebar_position:4},sidebar:"GuideSidebar",previous:{title:"Styling Context Texts and Text Holder Widget",permalink:"/ko-kr/docs/guide_docs/tutorial/styling-context-texts-and-text-holder-widget/"},next:{title:"Trying Dialogue Events",permalink:"/ko-kr/docs/guide_docs/tutorial/trying-dialogue-events/"}},r={},c=[{value:"Creating Dialogue Conditions",id:"creating-dialogue-conditions",level:2},{value:"Implementing Dialogue Condition Logic",id:"implementing-dialogue-condition-logic",level:2},{value:"With Node Priority Feature",id:"with-node-priority-feature",level:2},{value:"With Branch Node",id:"with-branch-node",level:2}];function l(e){const t={admonition:"admonition",code:"code",h2:"h2",hr:"hr",img:"img",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,o.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"Dialogue Conditions"})," are blueprint(or C++) asset than contain logic that decide whether to play a dialogue node, and drive the main way of branching of the dialogue system. you can freely write and use the logic you need. In this document, we'll learn how to create and use such dialogue conditions."]}),"\n",(0,n.jsx)(t.hr,{}),"\n",(0,n.jsx)(t.h2,{id:"creating-dialogue-conditions",children:"Creating Dialogue Conditions"}),"\n",(0,n.jsxs)(t.p,{children:["Let's start by creating a dialogue condition. Open any Dialogue Manager and click on the ",(0,n.jsx)(t.strong,{children:"Create Custom Condition"})," button in the toolbar of the Dialogue Manager editor."]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Alt text",src:i(2973).Z+"",width:"977",height:"714"})}),"\n",(0,n.jsx)(t.p,{children:"Now, choose the type of condition you want from the options presented."}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Type"}),(0,n.jsx)(t.th,{children:"Description"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"Dialogue Condition"}),(0,n.jsxs)(t.td,{children:["often called as ",(0,n.jsx)(t.strong,{children:"Instanced Dialogue Condition"})," is a type of Dialogue Condition that can be instanced on the dialogue nodes and due to that only available to the specific dialogue manager"]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"Level Dialogue Condtion"}),(0,n.jsx)(t.td,{children:"A type of Dialogue Condition that derived from the AActor class and can be placed on a level. and due to this, it can be easily shared between multiple dialogue managers."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"Dialogue Answer Condtion"}),(0,n.jsx)(t.td,{children:"A type of Dialogue Condition that is derived from the Dialogue Condition, but with some utility for the conditional answer of select node. (We will talk about it later in another tutorial.)"})]})]})]}),"\n",(0,n.jsx)(t.p,{children:"In this example, we'll choose Instanced Condition to create an instance dialogue condition."}),"\n",(0,n.jsxs)(t.p,{children:["And to make it easy to find, We'll rename it to ",(0,n.jsx)(t.strong,{children:'"DC_Tutorial"'})]}),"\n",(0,n.jsx)(t.admonition,{type:"tip",children:(0,n.jsxs)(t.p,{children:["In the plugin, Dialogue Conditions usally use ",(0,n.jsx)(t.strong,{children:"DC_"})," as their prefix."]})}),"\n",(0,n.jsx)(t.p,{children:"After creating the dialogue condition asset, the process of writing the condition logic begins by overriding the following function:"}),"\n",(0,n.jsx)(t.p,{children:"For C++ derived classes:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-cpp",children:"virtual bool CheckCondition(class UDialogueWidgetBase* Widget, const TMap<FName, UActorComponent*>& ConversationParticipants);\n"})}),"\n",(0,n.jsx)(t.p,{children:"For Blueprint assets:"}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Alt text",src:i(1319).Z+"",width:"562",height:"286"})}),"\n",(0,n.jsx)(t.h2,{id:"implementing-dialogue-condition-logic",children:"Implementing Dialogue Condition Logic"}),"\n",(0,n.jsx)(t.p,{children:"You have to implement the logic that checks the requirements for the condition. If the condition check is successful, return true; otherwise, return false."}),"\n",(0,n.jsx)(t.admonition,{type:"tip",children:(0,n.jsx)(t.p,{children:"In normal usage, if the return value of this function is true then the nodes(or the logic with it) will be executed or be played, otherwise, it will not."})}),"\n",(0,n.jsx)(t.p,{children:"Since we have created a Blueprint asset in the tutorial, let's follow the second method."}),"\n",(0,n.jsx)(t.p,{children:"For a simple real-world usage explanation, let's assume a situation. We want the condition to pass only if the player stored enough amount of apple in the box."}),"\n",(0,n.jsx)(t.admonition,{type:"tip",children:(0,n.jsxs)(t.p,{children:["You don't need to follow those extra steps becuase it's only for the explanation ",":D"," for sure"]})}),"\n",(0,n.jsx)(t.p,{children:"First, let's make an apple actor class for the situation."}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Alt text",src:i(4327).Z+"",width:"1668",height:"958"})}),"\n",(0,n.jsx)(t.p,{children:"And now let's make a box that player must to put the apples at."}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Alt text",src:i(8306).Z+"",width:"1808",height:"1015"})}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Alt text",src:i(4525).Z+"",width:"1495",height:"584"})}),"\n",(0,n.jsx)(t.p,{children:"Simply added a box collision and implemented a simple function that checks the count of the apples in the box."}),"\n",(0,n.jsx)(t.p,{children:"Now, let's implement the logic for the condition!"}),"\n",(0,n.jsx)(t.p,{children:"So, the condition's test should be passed only if the score is higher than the value we specify."}),"\n",(0,n.jsxs)(t.p,{children:["To implement this logic, let's create a property on the condition to store the goal score that will be used as a threshold for the condition execution, and make it public by pressing the ",(0,n.jsx)(t.strong,{children:"eye icon on the right side of the property row"})," to display it in the Dialogue Manager editor."]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Alt text",src:i(7105).Z+"",width:"330",height:"336"})}),"\n",(0,n.jsx)(t.p,{children:"And also add the soft reference for the apple box we will check."}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Alt text",src:i(1908).Z+"",width:"313",height:"222"})}),"\n",(0,n.jsxs)(t.p,{children:["And go to the overrided function ",(0,n.jsx)(t.strong,{children:"CheckCondition"})," and attach a logic that checks whether the count of the apples is higher than we specified."]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Alt text",src:i(7281).Z+"",width:"1172",height:"477"})}),"\n",(0,n.jsx)(t.p,{children:"Now, let's attach the created condition to a node in the manager."}),"\n",(0,n.jsx)(t.p,{children:"Click on the node, add a new element to the Instanced Conditions property in the Conditions section."}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Alt text",src:i(7759).Z+"",width:"1247",height:"314"})}),"\n",(0,n.jsx)(t.p,{children:"Now, select our condition in the element row we just added."}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Alt text",src:i(4555).Z+"",width:"1374",height:"536"})}),"\n",(0,n.jsx)(t.p,{children:"You can see that a condition instance is attached to the node instance, and also the property we added is being displayed on the editor.\r\nNow, set the goal score for this condition. In this example, let's set it to 3."}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Alt text",src:i(2591).Z+"",width:"1401",height:"372"})}),"\n",(0,n.jsx)(t.p,{children:"also, specify the apple box in the level to use in the condition test."}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Alt text",src:i(2806).Z+"",width:"1431",height:"694"})}),"\n",(0,n.jsx)(t.p,{children:"If you play this dialogue, you'll see that the node be played only when the current score is higher than the specified 3."}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Alt text",src:i(715).Z+"",width:"1073",height:"527"})}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Alt text",src:i(6270).Z+"",width:"1108",height:"521"})}),"\n",(0,n.jsx)(t.h2,{id:"with-node-priority-feature",children:"With Node Priority Feature"}),"\n",(0,n.jsxs)(t.p,{children:["But we're not done yet.\r\nUtilize the ",(0,n.jsx)(t.strong,{children:"node priority feature"})," to specify another node to play if this node execution fails. This allows you to display a message to the player indicating that the score is lower than the specified value."]}),"\n",(0,n.jsx)(t.p,{children:"Connect another node to the pin where you attached the condition. You can see a number displayed in the top right corner of the node."}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Alt text",src:i(1010).Z+"",width:"1229",height:"602"})}),"\n",(0,n.jsx)(t.p,{children:"Lower numbers indicate higher priority. When a dialogue is played, nodes with higher priority are tested first. If a node with higher priority fails the test, the system tries the next one with lower priority. If all nodes fail, the dialogue ends."}),"\n",(0,n.jsx)(t.p,{children:"For example, Let's attach more nodes on there and attach the same condition but with 2 as goalscore to the node with second high priority."}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Alt text",src:i(2117).Z+"",width:"1224",height:"801"})}),"\n",(0,n.jsx)(t.p,{children:'By setting it up this way, if the count is higher than 3, it will play the first node, and if not and the score is higher than 2, it will play the second node (node with "You collected 2 apples"), and if less than that, the node with the lowest priority (the node with "You gotta work harder than now").'}),"\n",(0,n.jsx)(t.h2,{id:"with-branch-node",children:"With Branch Node"}),"\n",(0,n.jsx)(t.p,{children:"Alternatively, you can use the Branch Node to control branching based on the success or failure of a specific condition."}),"\n",(0,n.jsx)(t.p,{children:"If we replace the logic we just created with a Branch Node, it would look like this:"}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Alt text",src:i(5148).Z+"",width:"1552",height:"763"})}),"\n",(0,n.jsx)(t.p,{children:"Attach our newly created condition to the Branch Node. Connect the test success node to the true pin, and the test failure node to the false pin."})]})}function h(e={}){const{wrapper:t}={...(0,o.a)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},1319:(e,t,i)=>{i.d(t,{Z:()=>n});const n=i.p+"assets/images/image-1-1bd3ca5aa409ac804c2f516275751e8c.png"},4327:(e,t,i)=>{i.d(t,{Z:()=>n});const n=i.p+"assets/images/image-10-6d79211963d022e1cd2ecd7c48089e5f.png"},4525:(e,t,i)=>{i.d(t,{Z:()=>n});const n=i.p+"assets/images/image-11-db6eaf8b77517568822fe7e47d09daf7.png"},5148:(e,t,i)=>{i.d(t,{Z:()=>n});const n=i.p+"assets/images/image-12-58f115cc9a6a6a488b7a0eb87d026968.png"},7281:(e,t,i)=>{i.d(t,{Z:()=>n});const n=i.p+"assets/images/image-13-b652cd397a5384cae1513d290b3394d8.png"},7759:(e,t,i)=>{i.d(t,{Z:()=>n});const n=i.p+"assets/images/image-14-6afb85acbe7dd8df18ab5aa4b7e674f8.png"},4555:(e,t,i)=>{i.d(t,{Z:()=>n});const n=i.p+"assets/images/image-15-3aec4c9cb3a4a70c85499aad47954c0c.png"},1908:(e,t,i)=>{i.d(t,{Z:()=>n});const n=i.p+"assets/images/image-16-5a12ae56beb8cfcaea27e98254a73271.png"},7105:(e,t,i)=>{i.d(t,{Z:()=>n});const n=i.p+"assets/images/image-2-bf7f1b08061070fce09e1525ad96eaa4.png"},2591:(e,t,i)=>{i.d(t,{Z:()=>n});const n=i.p+"assets/images/image-3-5df59aba53b661d8684c0558dcc828ea.png"},2806:(e,t,i)=>{i.d(t,{Z:()=>n});const n=i.p+"assets/images/image-4-1a7b8b077ab2e07cfd36f1fd8b31058f.png"},715:(e,t,i)=>{i.d(t,{Z:()=>n});const n=i.p+"assets/images/image-5-b9ba184dccb954b47d6eff1915fe50a6.png"},6270:(e,t,i)=>{i.d(t,{Z:()=>n});const n=i.p+"assets/images/image-6-32b560c20fa9cc460bbda5266e5f7960.png"},2117:(e,t,i)=>{i.d(t,{Z:()=>n});const n=i.p+"assets/images/image-7-e35daccba0cb2596dc659b308ea6db43.png"},1010:(e,t,i)=>{i.d(t,{Z:()=>n});const n=i.p+"assets/images/image-8-06727089cb1fae7b23115a34cdf5def7.png"},8306:(e,t,i)=>{i.d(t,{Z:()=>n});const n=i.p+"assets/images/image-9-51f603a1e0023e0a79a6ac10b324ecb8.png"},2973:(e,t,i)=>{i.d(t,{Z:()=>n});const n=i.p+"assets/images/image-3e1c5f77e055340c42582982fa5f041d.png"},1151:(e,t,i)=>{i.d(t,{Z:()=>d,a:()=>a});var n=i(7294);const o={},s=n.createContext(o);function a(e){const t=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),n.createElement(s.Provider,{value:t},e.children)}}}]);