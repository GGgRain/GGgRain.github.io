"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4750],{4009:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>l,frontMatter:()=>i,metadata:()=>r,toc:()=>c});var n=a(5893),s=a(1151);const i={title:"Trying Out Dialogue Fragments",description:"Explore the highly reusable function executor and easy-to-access function and property storage during dialog playback - the Dialogue Fragments.",sidebar_position:7},o=void 0,r={id:"guide_docs/tutorial/trying-dialogue-fragments/trying-dialogue-fragments",title:"Trying Out Dialogue Fragments",description:"Explore the highly reusable function executor and easy-to-access function and property storage during dialog playback - the Dialogue Fragments.",source:"@site/docs/guide_docs/tutorial/trying-dialogue-fragments/trying-dialogue-fragments.md",sourceDirName:"guide_docs/tutorial/trying-dialogue-fragments",slug:"/guide_docs/tutorial/trying-dialogue-fragments/",permalink:"/ko-kr/docs/guide_docs/tutorial/trying-dialogue-fragments/",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/guide_docs/tutorial/trying-dialogue-fragments/trying-dialogue-fragments.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{title:"Trying Out Dialogue Fragments",description:"Explore the highly reusable function executor and easy-to-access function and property storage during dialog playback - the Dialogue Fragments.",sidebar_position:7},sidebar:"GuideSidebar",previous:{title:"Trying Out Dialogue Inline Commands",permalink:"/ko-kr/docs/guide_docs/tutorial/trying-dialogue-inline-commands/"},next:{title:"Using Simple Dialogue Subsystem",permalink:"/ko-kr/docs/guide_docs/tutorial/using-simple-dialogue-subsystem/"}},d={},c=[{value:"Creating a Dialogue Fragment",id:"creating-a-dialogue-fragment",level:2},{value:"Attaching Fragments to Nodes",id:"attaching-fragments-to-nodes",level:2},{value:"Accessing Fragments Attached to Nodes",id:"accessing-fragments-attached-to-nodes",level:2},{value:"Attaching Fragments to the Dialogue Manager",id:"attaching-fragments-to-the-dialogue-manager",level:2},{value:"Accessing Fragments Attached to Nodes",id:"accessing-fragments-attached-to-nodes-1",level:2}];function g(e){const t={admonition:"admonition",h2:"h2",hr:"hr",img:"img",p:"p",strong:"strong",...(0,s.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.p,{children:"The Fragment System is one of the most powerful tools in the Simple Dialogue System, allowing you to attach pre-defined storages or action sets called Dialogue Fragments to each node, enabling modification of the behavior and data of Dialogue Widget Base and Dialogue Node and also the interaction with the gameplay logics with just a few clicks."}),"\n",(0,n.jsx)(t.p,{children:"This document covers everything about creating and using fragments."}),"\n",(0,n.jsx)(t.hr,{}),"\n",(0,n.jsx)(t.h2,{id:"creating-a-dialogue-fragment",children:"Creating a Dialogue Fragment"}),"\n",(0,n.jsx)(t.p,{children:"First, let's create our first dialogue fragment."}),"\n",(0,n.jsx)(t.p,{children:"In this example, we'll create a fragment that spawns a bunch of apples at the character location whenever a new node is played."}),"\n",(0,n.jsxs)(t.p,{children:["Open any Dialogue Manager editor and click the ",(0,n.jsx)(t.strong,{children:'"Create New Fragment"'})," button in the toolbar."]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Alt text",src:a(8045).Z+"",width:"621",height:"249"})}),"\n",(0,n.jsxs)(t.p,{children:["Select ",(0,n.jsx)(t.strong,{children:"DialogueFragment"})," to create a new fragment asset and double-click to open it on the content browser."]}),"\n",(0,n.jsxs)(t.p,{children:["There is two functions(events) you have to override to use the fragment : ",(0,n.jsx)(t.strong,{children:"OnFragmentBeginPlay"}),", ",(0,n.jsx)(t.strong,{children:"OnFragmentEndPlay"}),"."]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Alt text",src:a(3753).Z+"",width:"319",height:"366"})}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"OnFragmentBeginPlay"})," is an event that will be triggered whenever the dialogue manager meet this fragment on its playback. If the fragment is attached to a node, it will be played before the node be played, and if the fragment is attached to the dialogue manager (root node) then it will be triggered right before the first node of the fragment be played."]}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"OnFragmentBeginPlay"})," is an event that will be triggered whenever the dialogue manager meet this fragment on its playback and ",(0,n.jsx)(t.strong,{children:"leave the object it is attached to"}),". If the fragment is attached to a node, it will be played after the node be ended, and if the fragment is attached to the dialogue manager (root node), then it will be triggered right after the dialogue manager's endplay."]}),"\n",(0,n.jsx)(t.p,{children:"Now, let's attach the logic that throws apples at the characters who is speaking on the node."}),"\n",(0,n.jsx)(t.p,{children:"First, let's create a function that grab the name of speakers from the provided dialogue node context base, and use it to iterate and collect all the references of speaker participant handles from the provided participant map."}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Alt text",src:a(1716).Z+"",width:"1223",height:"434"})}),"\n",(0,n.jsx)(t.p,{children:"And now, let's create a function that simply spawns apples on to the provided component's owner."}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Alt text",src:a(4704).Z+"",width:"1136",height:"692"})}),"\n",(0,n.jsx)(t.p,{children:"And attach the following logic :"}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Alt text",src:a(1547).Z+"",width:"1238",height:"591"})}),"\n",(0,n.jsxs)(t.p,{children:["We are binding a custom event to the dialogue widget's ",(0,n.jsx)(t.strong,{children:"OnNodePlayed"})," Event since we want to execute the apple throwing logic when any node is played on the dialogue. So from the ",(0,n.jsx)(t.strong,{children:"On Fragment Begin Play"})," event, we binded the event and released it on the ",(0,n.jsx)(t.strong,{children:"On Fragment End Play"})," event."]}),"\n",(0,n.jsxs)(t.admonition,{type:"tip",children:[(0,n.jsx)(t.p,{children:"As we briefly mentioned, fragments can be attached to the both nodes and dialogue manager (root node), and you might need to know which is the fragment attached to."}),(0,n.jsx)(t.p,{children:"This can be easily recognized since the fragment that is attached to the dialogue manager will have the dialogue manager as its outer, and the one attached to nodes will have the nodes as its outer."}),(0,n.jsx)(t.p,{children:"So, simply grab the Parent Object node and conduct a simple casting to it. it will help you branch the logic according to the condition."}),(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Alt text",src:a(8760).Z+"",width:"641",height:"480"})})]}),"\n",(0,n.jsx)(t.p,{children:"If we attach it on the dialogue manager and run it, we will see the following result."}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Alt text",src:a(1633).Z+"",width:"1080",height:"500"})}),"\n",(0,n.jsx)(t.p,{children:"You can see a bunch of apples are spawned and falling from the sky to the speakers of the nodes when each node starts to be played."}),"\n",(0,n.jsx)(t.hr,{}),"\n",(0,n.jsx)(t.h2,{id:"attaching-fragments-to-nodes",children:"Attaching Fragments to Nodes"}),"\n",(0,n.jsx)(t.p,{children:"Now, go back to the Dialogue Manager to find the node to which we want to attach our fragment. Right-click on it."}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Alt text",src:a(5214).Z+"",width:"1022",height:"501"})}),"\n",(0,n.jsx)(t.p,{children:'In the "Add Fragment" section, find and select the fragment we just created.'}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Alt text",src:a(4834).Z+"",width:"771",height:"333"})}),"\n",(0,n.jsxs)(t.p,{children:["Now you can see that our fragment is attached to the node. A fragment attached to a node is called a ",(0,n.jsx)(t.strong,{children:"Node Fragment"}),"."]}),"\n",(0,n.jsx)(t.p,{children:"If you want to move the fragment to another node, you can easily do so through drag and drop."}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Alt text",src:a(3837).Z+"",width:"1412",height:"558"})}),"\n",(0,n.jsx)(t.p,{children:"If you want to copy the fragment, click on the fragment, press ctrl-c, and press ctrl-v to copy."}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Alt text",src:a(9244).Z+"",width:"835",height:"355"})}),"\n",(0,n.jsx)(t.p,{children:"If you want to specify a thumbnail to your fragment, you can click the fragment and specity the Fragment Thumbnail property and adjusting scale related properties."}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Alt text",src:a(8255).Z+"",width:"1237",height:"336"})}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Alt text",src:a(6745).Z+"",width:"802",height:"417"})}),"\n",(0,n.jsx)(t.admonition,{type:"tip",children:(0,n.jsx)(t.p,{children:"specify it on the class editor to make the thumbnail as the class default."})}),"\n",(0,n.jsx)(t.h2,{id:"accessing-fragments-attached-to-nodes",children:"Accessing Fragments Attached to Nodes"}),"\n",(0,n.jsxs)(t.p,{children:["Great. But what if we want to access the fragment reference within a dialogue node through events or somewhere elses? It's simple. You can retrieve the fragment reference using the functions ",(0,n.jsx)(t.strong,{children:"FindFragmentByClass"}),", ",(0,n.jsx)(t.strong,{children:"FindAllFragmentByClass"}),", or ",(0,n.jsx)(t.strong,{children:"GetAllFragment"})," through the node reference."]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Alt text",src:a(7920).Z+"",width:"1068",height:"488"})}),"\n",(0,n.jsx)(t.p,{children:"Use this functions to access the fragment and modify or save the desired data or call the desired functions."}),"\n",(0,n.jsx)(t.h2,{id:"attaching-fragments-to-the-dialogue-manager",children:"Attaching Fragments to the Dialogue Manager"}),"\n",(0,n.jsx)(t.p,{children:"It's almost same with when we attached it on the dialogue nodes, but instead of the dialogue nodes, you have to right click on the root node to attach your fragments on the dialogue manager."}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Alt text",src:a(7379).Z+"",width:"817",height:"598"})}),"\n",(0,n.jsx)(t.h2,{id:"accessing-fragments-attached-to-nodes-1",children:"Accessing Fragments Attached to Nodes"}),"\n",(0,n.jsxs)(t.p,{children:["Accessing to the fragments is also almost same to the dialogue nodes. Grab the reference of the dialogue manager from the dialogue widget and use ",(0,n.jsx)(t.strong,{children:"FindManagerFragmentByClass"}),", ",(0,n.jsx)(t.strong,{children:"FindManagerFragmentsByClass"}),", ",(0,n.jsx)(t.strong,{children:"GetAllManagerFragments"})]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Alt text",src:a(9274).Z+"",width:"1010",height:"477"})}),"\n",(0,n.jsx)(t.admonition,{type:"tip",children:(0,n.jsx)(t.p,{children:"Since it is way easiler to access the manager fragment than node fragment, it is wise to use manager fragment if you want to attach some storages that need to be accessed by the other sourses including dialogue events or commands."})})]})}function l(e={}){const{wrapper:t}={...(0,s.a)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(g,{...e})}):g(e)}},3753:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/image-1-6a4f3412d830570ccdbc6214262eb0e0.png"},3837:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/image-10-2438e076cef7227ee1144eb3692b687c.png"},9244:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/image-11-5ecd1b3a1805c0265ae5ae8bcefb5247.png"},8255:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/image-12-3778c382ace2d81b93aab856ebc0a25d.png"},6745:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/image-13-aab8b4a50c94e57161ec18d3101ff402.png"},7920:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/image-14-d5bf1ac71ae4ad9ff6f11691bdbcbe2a.png"},7379:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/image-15-d982c0f2c35be00efe279a19e203eb75.png"},9274:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/image-16-7aac03fd3b32446a4dacc4719c9cff44.png"},1716:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/image-2-114e3f05fa05480cca7d9526a00c4104.png"},4704:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/image-3-8da01f767ff283332443cd10b0f51192.png"},1547:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/image-5-f25c0b0730a3325d14a906159d3a36f5.png"},8760:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/image-6-3953deba4cf49871d516834e616f7688.png"},1633:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/image-7-b43b043839c8a86a210b1a5ee2c954d8.png"},5214:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/image-8-88cdf766f1f929fd5da4be92705b434c.png"},4834:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/image-9-8b603c216ad9e228d1f4dca4648b277d.png"},8045:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/image-64b5d42f0494aaeffb1739a23bd51c34.png"},1151:(e,t,a)=>{a.d(t,{Z:()=>r,a:()=>o});var n=a(7294);const s={},i=n.createContext(s);function o(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);