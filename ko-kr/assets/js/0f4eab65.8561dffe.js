"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8147],{5253:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>a,metadata:()=>d,toc:()=>r});var t=i(5893),o=i(1151);const a={title:"Trying Dialogue Inline Commands",description:"Explore the usage of dialogue inline commands to execute gameplay logic during dialogues.",sidebar_position:7},s=void 0,d={id:"guide_docs/tutorial/trying-dialogue-inline-commands/trying-dialogue-inline-commands",title:"Trying Dialogue Inline Commands",description:"Explore the usage of dialogue inline commands to execute gameplay logic during dialogues.",source:"@site/docs/guide_docs/tutorial/trying-dialogue-inline-commands/trying-dialogue-inline-commands.md",sourceDirName:"guide_docs/tutorial/trying-dialogue-inline-commands",slug:"/guide_docs/tutorial/trying-dialogue-inline-commands/",permalink:"/ko-kr/docs/guide_docs/tutorial/trying-dialogue-inline-commands/",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/guide_docs/tutorial/trying-dialogue-inline-commands/trying-dialogue-inline-commands.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{title:"Trying Dialogue Inline Commands",description:"Explore the usage of dialogue inline commands to execute gameplay logic during dialogues.",sidebar_position:7},sidebar:"GuideSidebar",previous:{title:"Trying Dialogue Events",permalink:"/ko-kr/docs/guide_docs/tutorial/trying-dialogue-events/"},next:{title:"Trying Dialogue Fragments",permalink:"/ko-kr/docs/guide_docs/tutorial/trying-dialogue-fragments/"}},l={},r=[{value:"Binding Inline Commands via Command Bind Editor",id:"binding-inline-commands-via-command-bind-editor",level:3},{value:"Modifying a Bound Dialogue Inline Command",id:"modifying-a-bound-dialogue-inline-command",level:3}];function c(e){const n={a:"a",admonition:"admonition",h3:"h3",hr:"hr",li:"li",mdxAdmonitionTitle:"mdxAdmonitionTitle",p:"p",strong:"strong",ul:"ul",...(0,o.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsx)(n.p,{children:"This document includes a general description of dialogue inline commands. For precise information and understanding, it is recommended to refer to the [Dialogue Inline Commands][/docs/reference/class_reference/asset/DialogueInlineCommand] document."})}),"\n",(0,t.jsx)(n.p,{children:"Dialogue Inline Commands are powerful tools that help bind and utilize actions at specific points in text within the Dialogue Node Base Context's Context Text."}),"\n",(0,t.jsxs)(n.admonition,{type:"note",children:[(0,t.jsx)(n.p,{children:"This document utilizes already-existing default inline commands provided by the [[Monologue Node]]. For detailed information on creating command assets, refer to the [Dialogue Inline Commands][/docs/reference/class_reference/asset/DialogueInlineCommand] document."}),(0,t.jsxs)(n.p,{children:["To use newly defined inline commands rather than the default ones provided by the [[Monologue Node]], you need to register the command in the node class. For details, also refer to the ",(0,t.jsx)(n.a,{href:"/docs/reference/class_reference/asset/DialogueInlineCommand",children:"Dialogue Inline Commands"})," document."]})]}),"\n",(0,t.jsx)(n.admonition,{type:"danger",children:(0,t.jsxs)(n.p,{children:["Dialogue Inline Commands are designed to be used on the cosmetic purposes such as playing sound or spawning particles, and ",(0,t.jsx)(n.strong,{children:"not recommended to be used on the important gameplay logics since this can be vulunerable on an injection attack, Though we have a internal injection attack protector for the system."})]})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"binding-inline-commands-via-command-bind-editor",children:"Binding Inline Commands via Command Bind Editor"}),"\n",(0,t.jsxs)(n.p,{children:["The Node Body of the [Dialogue Node Base Context][/docs/reference/class_reference/dialogue_node/DialogueNodeBase_Context] has a convenient button built in to assist in binding [Dialogue Inline Commands][/docs/reference/class_reference/asset/DialogueInlineCommand] to the Context Text. In this example, we'll explain using the ",(0,t.jsx)(n.a,{href:"/docs/reference/class_reference/dialogue_node/based_on_DialogueNodeBase_Context/DialogueNode_Monologue",children:"Monologue Node"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"![ContextNode.png]"}),"\n",(0,t.jsxs)(n.p,{children:["First, click on the part of the Context Text where you want to attach the command, and click the button labeled ",(0,t.jsx)(n.strong,{children:"Bind Command"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"![BindCommandMenu.png]"}),"\n",(0,t.jsxs)(n.p,{children:["A menu appears where you can select the inline command to bind. From various default commands, let's hover over the command labeled ",(0,t.jsx)(n.strong,{children:"SetSpeed"}),"."]}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsx)(n.p,{children:"Descriptions of each command are available in the [[Dialogue Inline Commands]] document."})}),"\n",(0,t.jsx)(n.p,{children:"![CommandTooltip.png]"}),"\n",(0,t.jsxs)(n.p,{children:["Here, you see a brief explanation of the ",(0,t.jsx)(n.strong,{children:"SetSpeed"})," command's functionality and an explanation of the attribute (parameter) the command uses, which is ",(0,t.jsx)(n.strong,{children:"Value"})," in this case."]}),"\n",(0,t.jsxs)(n.admonition,{type:"note",children:[(0,t.jsx)(n.mdxAdmonitionTitle,{}),(0,t.jsxs)(n.p,{children:["The inline commands support only the property types that can be stored in ",(0,t.jsx)(n.strong,{children:"the string form and numeric form"}),".\r\nThe property types it supports are as following:"]}),(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Boolean"}),"\n",(0,t.jsx)(n.li,{children:"Numeric types (int, float, double...)"}),"\n",(0,t.jsxs)(n.li,{children:["Text (With a transient key and namespace. ",(0,t.jsx)(n.strong,{children:"You can not localize this text"}),".)"]}),"\n",(0,t.jsx)(n.li,{children:"String, Name"}),"\n",(0,t.jsx)(n.li,{children:"Byte Types (Enums)"}),"\n"]}),(0,t.jsxs)(n.p,{children:["The property types it ",(0,t.jsx)(n.strong,{children:"does not supports"})," are as following:"]}),(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Object, class reference"}),"\n",(0,t.jsx)(n.li,{children:"Map, Array, Set, Tuple"}),"\n",(0,t.jsx)(n.li,{children:"Struct"}),"\n"]}),(0,t.jsxs)(n.p,{children:["As you can see, It has a certain limits on some applications, and this is why we also support ",(0,t.jsxs)(n.strong,{children:[(0,t.jsx)(n.a,{href:"/docs/reference/class_reference/asset/DialogueEvent",children:"Dialogue Events"}),"!"]})," use Dialogue Events instead for this case."]})]}),"\n",(0,t.jsxs)(n.p,{children:["Now, click on ",(0,t.jsx)(n.strong,{children:"SetSpeed"})," to bind this command to the text."]}),"\n",(0,t.jsx)(n.p,{children:"![binded.png]"}),"\n",(0,t.jsxs)(n.p,{children:["Voila! The ",(0,t.jsx)(n.strong,{children:"SetSpeed"})," command is now bound to the text."]}),"\n",(0,t.jsxs)(n.p,{children:["A ",(0,t.jsx)(n.strong,{children:"bound command"})," is indicated by a ",(0,t.jsx)(n.strong,{children:"button with the command's sequence on a black background"}),". Below the text, a display box is added for each sequence, showing the full content of the command."]}),"\n",(0,t.jsxs)(n.p,{children:["Now, when the dialogue widget updates the text and passes the part with our bound ",(0,t.jsx)(n.strong,{children:"SetSpeed"})," command, it will be triggered. Very simple, isn't it?"]}),"\n",(0,t.jsxs)(n.p,{children:["However, as we saw earlier, the ",(0,t.jsx)(n.strong,{children:"SetSpeed"})," command uses the ",(0,t.jsx)(n.strong,{children:"Value"})," attribute, and we haven't initialized this value yet. Let's change this value now."]}),"\n",(0,t.jsxs)(n.admonition,{type:"info",children:[(0,t.jsx)(n.mdxAdmonitionTitle,{}),(0,t.jsxs)(n.p,{children:["Of course, not initializing the ",(0,t.jsx)(n.strong,{children:"Value"})," attribute won't cause issues like engine crashes; uninitialized attributes are automatically initialized with class default values. However, to prevent undesired behavior, let's make a modification."]})]}),"\n",(0,t.jsx)(n.h3,{id:"modifying-a-bound-dialogue-inline-command",children:"Modifying a Bound Dialogue Inline Command"}),"\n",(0,t.jsx)(n.p,{children:"Click on the bound command displayed above the text."}),"\n",(0,t.jsx)(n.p,{children:"![CommandEdit.png]"}),"\n",(0,t.jsxs)(n.p,{children:["A menu named ",(0,t.jsx)(n.strong,{children:"Command Editor"})," appears. You can modify everything about the command, including its attributes. Let's focus on modifying the section for the ",(0,t.jsx)(n.strong,{children:"Value"})," attribute in the center."]}),"\n",(0,t.jsxs)(n.p,{children:["Click the checkbox to the left of the ",(0,t.jsx)(n.strong,{children:"Value"})," attribute."]}),"\n",(0,t.jsx)(n.p,{children:"![CommandAttributeEnabled.png]"}),"\n",(0,t.jsxs)(n.p,{children:["Now, you can see that the ",(0,t.jsx)(n.strong,{children:"Value"}),' attribute\'s value has become editable. You also notice that the text "Value=" has been added to the Raw Command part. By checking the checkbox, we explicitly state that we want to initialize the value of this attribute. Now, you can modify this value as desired to control the behavior of the command.']}),"\n",(0,t.jsx)(n.p,{children:"Once you've modified the value as desired, click on a blank area of the graph to close the Command Editor and save the changes."}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.p,{children:"Now, if you run the dialogue manager and trigger the inline command, you'll see that the update frequency of the dialogue widget's text changes as you've set. If you've reached this point, well done! You've mastered the basics of using inline commands."}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsx)(n.p,{children:"There's a hero beyond events and inline commands that excels at storing additional data for dialogues, manipulating dialogues, and executing gameplay logic. The next tutorial is [[Trying Fragment System]]."})}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsx)(n.p,{children:"...All these diverse additions to assist gameplay logic execution have reasons behind them. Everything will be clearly explained in the next tutorial, so please stay with us a little longer."})})]})}function u(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},1151:(e,n,i)=>{i.d(n,{Z:()=>d,a:()=>s});var t=i(7294);const o={},a=t.createContext(o);function s(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);