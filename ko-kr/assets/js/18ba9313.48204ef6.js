"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4750],{4009:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>r,default:()=>g,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var a=n(5893),o=n(1151);const i={title:"Trying Dialogue Fragments",description:"Explore the highly reusable function executor and easy-to-access function and property storage during dialog playback - the Dialogue Fragments.",sidebar_position:8},r=void 0,s={id:"guide_docs/tutorial/trying-dialogue-fragments/trying-dialogue-fragments",title:"Trying Dialogue Fragments",description:"Explore the highly reusable function executor and easy-to-access function and property storage during dialog playback - the Dialogue Fragments.",source:"@site/docs/guide_docs/tutorial/trying-dialogue-fragments/trying-dialogue-fragments.md",sourceDirName:"guide_docs/tutorial/trying-dialogue-fragments",slug:"/guide_docs/tutorial/trying-dialogue-fragments/",permalink:"/ko-kr/docs/guide_docs/tutorial/trying-dialogue-fragments/",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/guide_docs/tutorial/trying-dialogue-fragments/trying-dialogue-fragments.md",tags:[],version:"current",sidebarPosition:8,frontMatter:{title:"Trying Dialogue Fragments",description:"Explore the highly reusable function executor and easy-to-access function and property storage during dialog playback - the Dialogue Fragments.",sidebar_position:8},sidebar:"GuideSidebar",previous:{title:"Trying Dialogue Events",permalink:"/ko-kr/docs/guide_docs/tutorial/trying-dialogue-events/"},next:{title:"Trying Dialogue Inline Commands",permalink:"/ko-kr/docs/guide_docs/tutorial/trying-dialogue-inline-commands/trying-dialoigue-inline-commands"}},d={},l=[{value:"Creating a Dialogue Fragment",id:"creating-a-dialogue-fragment",level:2},{value:"Attaching Fragments to Nodes",id:"attaching-fragments-to-nodes",level:2},{value:"Accessing Fragments Attached to Nodes",id:"accessing-fragments-attached-to-nodes",level:2},{value:"Attaching Fragments to the Dialogue Manager",id:"attaching-fragments-to-the-dialogue-manager",level:2}];function c(e){const t={blockquote:"blockquote",h2:"h2",hr:"hr",p:"p",strong:"strong",...(0,o.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.p,{children:"The Fragment System is one of the most powerful tools in the Simple Dialogue System, allowing you to attach pre-defined storages or action sets called [[Dialogue Fragments]] to each node, enabling modification of the behavior and data of [[Dialogue Widget Base]] and [[Dialogue Node]] with just a few clicks."}),"\n",(0,a.jsx)(t.p,{children:"This document covers everything about creating and using fragments."}),"\n",(0,a.jsxs)(t.blockquote,{children:["\n",(0,a.jsx)(t.p,{children:"[!Info] For a more detailed explanation of the class structure of Dialogue Fragments, refer to the [[Dialogue Fragments]] document."}),"\n"]}),"\n",(0,a.jsx)(t.hr,{}),"\n",(0,a.jsx)(t.h2,{id:"creating-a-dialogue-fragment",children:"Creating a Dialogue Fragment"}),"\n",(0,a.jsx)(t.p,{children:"First, let's create our first dialogue fragment."}),"\n",(0,a.jsx)(t.p,{children:"In this example, we'll create a fragment that, when attached to a node, changes the playback speed of the dialogue widget to a desired value and overrides text data as it plays."}),"\n",(0,a.jsx)(t.p,{children:"The reason for creating such a dialogue fragment is to demonstrate interaction with the dialogue widget through speed control and interaction with the dialogue node by overriding text."}),"\n",(0,a.jsx)(t.p,{children:'Open any [[Dialogue Manager]] editor and click the "Create New Fragment" button in the toolbar.'}),"\n",(0,a.jsx)(t.p,{children:"A new fragment asset is created. Double-click to open it."}),"\n",(0,a.jsx)(t.p,{children:"First, create a float variable to represent the new speed to apply. Also, create a variable for the text data to overwrite."}),"\n",(0,a.jsx)(t.p,{children:"Variables marked as public (modifiable instances) in the fragment blueprint or C++ class are automatically displayed and editable in the Dialogue Manager editor. We will use this feature to set the desired speed in the editor after attaching the fragment."}),"\n",(0,a.jsx)(t.p,{children:"The next step is to override some functions to write the desired logic, such as adjusting the playback speed of the dialogue widget and changing the text of the dialogue node.\r\n\u3161\u3161\u3161\u3161 Add function descriptions"}),"\n",(0,a.jsx)(t.p,{children:"Alright, the creation of the fragment is complete."}),"\n",(0,a.jsx)(t.hr,{}),"\n",(0,a.jsx)(t.h2,{id:"attaching-fragments-to-nodes",children:"Attaching Fragments to Nodes"}),"\n",(0,a.jsx)(t.p,{children:"Now, go back to the Dialogue Manager to find the node to which we want to attach our fragment. Right-click on it."}),"\n",(0,a.jsx)(t.p,{children:'In the "Add Fragment" section, find and select the fragment we just created.'}),"\n",(0,a.jsxs)(t.p,{children:["Now you can see that our fragment is attached to the node. A fragment attached to a node is called a ",(0,a.jsx)(t.strong,{children:"Node Fragment"}),". Refer to the [[Dialogue Fragments]] document for more details."]}),"\n",(0,a.jsx)(t.p,{children:"However, if we like the text that was initially placed in this node, we might be a bit disappointed if our fragment overwrites it. So, let's try moving this fragment to another node."}),"\n",(0,a.jsx)(t.p,{children:"If you want to move the fragment to another node, you can easily do so through drag and drop."}),"\n",(0,a.jsx)(t.p,{children:"If you want to copy the fragment, click on the fragment, press ctrl-c, and press ctrl-v to copy."}),"\n",(0,a.jsx)(t.p,{children:"Now, fill in the data for the fragment, and let's run it."}),"\n",(0,a.jsx)(t.p,{children:"You will see that the text is overwritten as you specified, and the playback speed changes as well."}),"\n",(0,a.jsx)(t.hr,{}),"\n",(0,a.jsx)(t.h2,{id:"accessing-fragments-attached-to-nodes",children:"Accessing Fragments Attached to Nodes"}),"\n",(0,a.jsx)(t.p,{children:"Great. But what if we want to access the fragment reference within a dialogue node through events or other means? It's simple. You can retrieve the fragment reference using the functions FindFragmentByClass, FindAllFragmentByClass, or GetAllFragment through the node reference."}),"\n",(0,a.jsx)(t.p,{children:"Let's create an event to demonstrate this."}),"\n",(0,a.jsx)(t.p,{children:"In the event, use the base node reference to fetch the fragment we just created and print the name of the fragment object to the screen."}),"\n",(0,a.jsx)(t.p,{children:"Voila! You can see that it works as expected."}),"\n",(0,a.jsx)(t.p,{children:"Use this approach to access the fragment and modify or save the desired data or call the desired functions."}),"\n",(0,a.jsx)(t.hr,{}),"\n",(0,a.jsx)(t.h2,{id:"attaching-fragments-to-the-dialogue-manager",children:"Attaching Fragments to the Dialogue Manager"}),"\n",(0,a.jsx)(t.hr,{}),"\n",(0,a.jsxs)(t.blockquote,{children:["\n",(0,a.jsx)(t.p,{children:"[!note] Congratulations if you've followed this far. Now, you've explored all the systems related to controlling the logic of the dialogue itself."}),"\n"]}),"\n",(0,a.jsxs)(t.blockquote,{children:["\n",(0,a.jsx)(t.p,{children:"[!note] The next tutorial covers advanced topics. In addition to the nodes we explored in [[Trying Basic Nodes]], you can declare and use dialogue nodes with any data and logic you want. Let's move on to the [[Creating Custom Nodes]] tutorial."}),"\n"]}),"\n",(0,a.jsx)(t.p,{children:"It seems like you've shared a tutorial or documentation on using dialogue fragments in a game development context. If you have any specific questions or if there's anything specific you'd like assistance with, feel free to let me know!"})]})}function g(e={}){const{wrapper:t}={...(0,o.a)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},1151:(e,t,n)=>{n.d(t,{Z:()=>s,a:()=>r});var a=n(7294);const o={},i=a.createContext(o);function r(e){const t=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),a.createElement(i.Provider,{value:t},e.children)}}}]);