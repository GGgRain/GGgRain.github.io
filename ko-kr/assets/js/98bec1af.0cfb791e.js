"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5288],{9080:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>s,metadata:()=>r,toc:()=>l});var i=n(5893),a=n(1151);const s={title:"1.16.0",description:"Search & Replace and Dialogue Management Rework, and a new formatting method",sidebar_position:1},o=void 0,r={id:"release_note/SDS1/1.16/1.16.0/1.16.0",title:"1.16.0",description:"Search & Replace and Dialogue Management Rework, and a new formatting method",source:"@site/docs/release_note/SDS1/1.16/1.16.0/1.16.0.md",sourceDirName:"release_note/SDS1/1.16/1.16.0",slug:"/release_note/SDS1/1.16/1.16.0/",permalink:"/ko-kr/docs/release_note/SDS1/1.16/1.16.0/",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/release_note/SDS1/1.16/1.16.0/1.16.0.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"1.16.0",description:"Search & Replace and Dialogue Management Rework, and a new formatting method",sidebar_position:1},sidebar:"releaseNoteSidebar",previous:{title:"1.16",permalink:"/ko-kr/docs/category/116"}},d={},l=[{value:"Node Renaming",id:"node-renaming",level:3},{value:"Start Dialogue From Specific Node",id:"start-dialogue-from-specific-node",level:3},{value:"Search &amp; Replace",id:"search--replace",level:3},{value:"Dialogue Management Tab Reworked",id:"dialogue-management-tab-reworked",level:3},{value:"New Formatting Method",id:"new-formatting-method",level:3},{value:"Pin Related",id:"pin-related",level:3},{value:"Optimization",id:"optimization",level:3},{value:"Dialogue Text Holder Widget Changed",id:"dialogue-text-holder-widget-changed",level:3},{value:"Bug Fixes",id:"bug-fixes",level:3},{value:"Known Issues",id:"known-issues",level:3}];function c(e){const t={h3:"h3",img:"img",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,a.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h3,{id:"node-renaming",children:"Node Renaming"}),"\n",(0,i.jsx)(t.p,{children:"The node renaming feature has been added. You can now double-click on the name of a graph node on the graph to edit it. Now, all dialogue nodes are displayed in the editor with their actual object names rather than class names."}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"Alt text",src:n(1020).Z+"",width:"808",height:"292"})}),"\n",(0,i.jsx)(t.h3,{id:"start-dialogue-from-specific-node",children:"Start Dialogue From Specific Node"}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.strong,{children:"Start Dialogue"})," function of the Simple Dialogue Subsystem now includes the ",(0,i.jsx)(t.strong,{children:"NodeNameToStartThisDialogueFrom"})," property. By specifying the node name, you can start the dialogue from that node, skipping others. If no value is specified or the node name is incorrect, the dialogue will start from the beginning."]}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"Alt text",src:n(6792).Z+"",width:"631",height:"656"})}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"In future updates, a function to check the existence of the node will be added."}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"search--replace",children:"Search & Replace"}),"\n",(0,i.jsxs)(t.p,{children:["The Dialogue Manager now has a ",(0,i.jsx)(t.strong,{children:"Search & Replace"})," feature. You can ",(0,i.jsx)(t.strong,{children:"open the Search tab with Ctrl + F and the Replace tab with Ctrl + H."})]}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"Alt text",src:n(486).Z+"",width:"1920",height:"1045"})}),"\n",(0,i.jsx)(t.p,{children:"More things will be supported gradually but currently, only searching for Text / Node / Subnode is supported, and the Replace function only works for Text."}),"\n",(0,i.jsx)(t.h3,{id:"dialogue-management-tab-reworked",children:"Dialogue Management Tab Reworked"}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"Alt text",src:n(3068).Z+"",width:"816",height:"922"})}),"\n",(0,i.jsx)(t.p,{children:"Previously only serving as a collection of asset reformatting resolvers, it now includes the Search & Replace tab. This allows for bulk modifications of all dialogues at a glance. It greatly facilitates changes that need to be made uniformly across many Dialogue Managers, such as modifying text (e.g., changing character names)."}),"\n",(0,i.jsx)(t.h3,{id:"new-formatting-method",children:"New Formatting Method"}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"The Context Finalizer (Context Binding) has now been removed from the plugin."})," This decision was made because the Context Finalizer had a structure contrary to the engine's default asset processing structure, and transitioning to a system using Fragments was more advantageous."]}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.strong,{children:"The plugin now utilizes Fragments for formatting."})}),"\n",(0,i.jsx)(t.p,{children:"The advantages of Fragments over Context Finalizer are as follows:"}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsx)(t.li,{children:"It uses much smaller disk space. Compared to Context Finalizer, Fragments take up only as much space as a single class, and object instances do not consume much space."}),"\n",(0,i.jsx)(t.li,{children:"It is reusable. For commonly used formatters, such as item prices, creating a Fragment dedicated to formatting and reusing it each time makes it easy to use without the need to write a new formatter every time, not like we did when we use the Context Finalizer."}),"\n",(0,i.jsx)(t.li,{children:"It allows for combinations. It means that multiple formatters for one text are possible. For example, if you need to format both the item price and skill name within one text, you can create a formatter for handling item prices and a formatter for handling skill names. By attaching both, you can format the required parts, eliminating the need to combine the same formatting logic as a one formatter as in the previous Context Finalizer."}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"pin-related",children:"Pin Related"}),"\n",(0,i.jsx)(t.p,{children:"For the Pin feature added in version 1.15.x, a property to adjust the scale of the icons has been added. Additionally, a property has been added to use Rich Text in the label of the pin. When updating the pin structure in custom nodes, you can now specify the desired text style."}),"\n",(0,i.jsx)(t.h3,{id:"optimization",children:"Optimization"}),"\n",(0,i.jsx)(t.p,{children:"The plugin has resolved a significant number of dependency issues hidden by Unity Build during C++ builds. Consequently, this has resolved UBT's overhead issues, leading to a substantial improvement in C++ build speed."}),"\n",(0,i.jsx)(t.p,{children:"As a result, There is a significant optimization during build times when using C++."}),"\n",(0,i.jsx)(t.h3,{id:"dialogue-text-holder-widget-changed",children:"Dialogue Text Holder Widget Changed"}),"\n",(0,i.jsx)(t.p,{children:'Now, you must provide child references directly through a setter function. You now no longer can specify it by naming it with a special name, "MainTextBlockChild" in the designer tab.'}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"Alt text",src:n(4220).Z+"",width:"665",height:"615"})}),"\n",(0,i.jsxs)(t.p,{children:["In the Construct event of TextHolderWidget BP, use the ",(0,i.jsx)(t.strong,{children:"SetMainTextBlock"})," function to specify the reference of the text block you want to use."]}),"\n",(0,i.jsx)(t.p,{children:"Furthermore, the Override Text Holder Widget Class feature for Participant and Context structures has been changed. If the overridden class is None, it will not use the default class but will not create the widget at all. This can be helpful when you don't want to display names or text."}),"\n",(0,i.jsx)(t.h3,{id:"bug-fixes",children:"Bug Fixes"}),"\n",(0,i.jsx)(t.p,{children:"A bug where fragments would not initialize properly when dropped onto another node through drag-and-drop, causing them to disappear upon exiting the editor, has been fixed."}),"\n",(0,i.jsx)(t.p,{children:"An issue where the Dialogue Widget would jitter at the edges when the viewport size was smaller than the widget size has been resolved."}),"\n",(0,i.jsx)(t.p,{children:"A problem where the On Node Connection List Changed function of Dialogue Nodes would cause engine crashes in the build version has been fixed."}),"\n",(0,i.jsx)(t.h3,{id:"known-issues",children:"Known Issues"}),"\n",(0,i.jsx)(t.p,{children:"A slight decrease in editor performance has been reported. Additionally, the editor code readability and structure have become quite complex, indicating that refactoring may be necessary in the future."})]})}function h(e={}){const{wrapper:t}={...(0,a.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},6792:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/image-1-c1c64f5f8f541afefb3f282f198ec49d.png"},486:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/image-2-461d9cd8194762d46ebd365191eceeaf.png"},3068:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/image-3-1f037f32b5a1d94052b10ada6ccf13b9.png"},4220:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/image-4-6a9e059b7314fa840731a5a154a4f260.png"},1020:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/image-7139263a9587d51c60760d958964ff46.png"},1151:(e,t,n)=>{n.d(t,{Z:()=>r,a:()=>o});var i=n(7294);const a={},s=i.createContext(a);function o(e){const t=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),i.createElement(s.Provider,{value:t},e.children)}}}]);