"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8344],{6462:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>r,default:()=>c,frontMatter:()=>a,metadata:()=>d,toc:()=>h});var i=n(5893),s=n(1151);const a={title:"Explanation of Speech Bubble Widget Features",description:"Learn what the Speech Bubble Widget has and how to use it.",sidebar_position:3},r=void 0,d={id:"guide_docs/tutorial-extras/explanation-of-speech-bubble-widget-features/explanation-of-speech-bubble-widget-features",title:"Explanation of Speech Bubble Widget Features",description:"Learn what the Speech Bubble Widget has and how to use it.",source:"@site/docs/guide_docs/tutorial-extras/explanation-of-speech-bubble-widget-features/explanation-of-speech-bubble-widget-features.md",sourceDirName:"guide_docs/tutorial-extras/explanation-of-speech-bubble-widget-features",slug:"/guide_docs/tutorial-extras/explanation-of-speech-bubble-widget-features/",permalink:"/docs/guide_docs/tutorial-extras/explanation-of-speech-bubble-widget-features/",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/guide_docs/tutorial-extras/explanation-of-speech-bubble-widget-features/explanation-of-speech-bubble-widget-features.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"Explanation of Speech Bubble Widget Features",description:"Learn what the Speech Bubble Widget has and how to use it.",sidebar_position:3},sidebar:"GuideSidebar",previous:{title:"Formatting with Fragments",permalink:"/docs/guide_docs/tutorial-extras/formatting-with-fragment/"},next:{title:"Making A Custom Node Class",permalink:"/docs/guide_docs/tutorial-extras/make-custom-node/"}},o={},h=[{value:"Rendering-Related",id:"rendering-related",level:2},{value:"Rendering Modes (Rendering Types)",id:"rendering-modes-rendering-types",level:3},{value:"WorldFollow",id:"worldfollow",level:4},{value:"WorldDynamic",id:"worlddynamic",level:4},{value:"Screen",id:"screen",level:4},{value:"Addition: Smooth Mode Transition",id:"addition-smooth-mode-transition",level:4},{value:"Rendering Clamping",id:"rendering-clamping",level:3},{value:"Rendering Lagging",id:"rendering-lagging",level:3},{value:"Edge Blur Feature",id:"edge-blur-feature",level:3},{value:"Hide On Behind The Object Feature",id:"hide-on-behind-the-object-feature",level:3},{value:"Advanced Opacity Interpolation",id:"advanced-opacity-interpolation",level:3}];function l(e){const t={admonition:"admonition",h2:"h2",h3:"h3",h4:"h4",hr:"hr",img:"img",mdxAdmonitionTitle:"mdxAdmonitionTitle",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(t.p,{children:["Our plugin provides a good start point and standard asset for the dialogue widget : ",(0,i.jsx)(t.strong,{children:"WB_SpeechBubble"})," , and many of the features that this widget blueprint has are originated from a C++ class named ",(0,i.jsx)(t.strong,{children:"SpeechBubbleWidget_Handled"}),"."]}),"\n",(0,i.jsx)(t.p,{children:"SpeechBubbleWidget_Handled is a dialogue widget class that handles the features related to the speech bubble rendering and also screen coordinate based screen space rendering."}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsx)(t.p,{children:"Here is the features the Speech Bubble Widget provides."}),"\n",(0,i.jsx)(t.h2,{id:"rendering-related",children:"Rendering-Related"}),"\n",(0,i.jsx)(t.h3,{id:"rendering-modes-rendering-types",children:"Rendering Modes (Rendering Types)"}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"Alt text",src:n(8279).Z+"",width:"858",height:"290"})}),"\n",(0,i.jsxs)(t.p,{children:["The SpeechBubble widget handle supports several rendering styles that the dialogue widget used in the game should inherently support. It can dynamically switch between each style during runtime using the ",(0,i.jsx)(t.strong,{children:"SetMode"})," function of the SpeechBubble widget handle class. Below are descriptions for each mode (",(0,i.jsx)(t.strong,{children:"EDialogueWidgetModeType"})," enum type)."]}),"\n",(0,i.jsxs)(t.admonition,{type:"tip",children:[(0,i.jsxs)(t.p,{children:["Plugin also provide an inline command named ",(0,i.jsx)(t.strong,{children:"DI_ChangeRenderType"})," that help you to change the mode of the render type easily on the text update."]}),(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"Alt text",src:n(1585).Z+"",width:"1244",height:"387"})})]}),"\n",(0,i.jsxs)(t.admonition,{type:"info",children:[(0,i.jsx)(t.mdxAdmonitionTitle,{}),(0,i.jsx)(t.p,{children:"In the early stages of development, there was a separate widget class called Dialogue Widget Handle alongside the SpeechBubble Widget Handle class, which was a screen-fixed widget class. However, through updates, the SpeechBubble Widget Handle class absorbed the functionality of this class. The SetMode function is a function added as part of this change."})]}),"\n",(0,i.jsx)(t.h4,{id:"worldfollow",children:"WorldFollow"}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"Alt text",src:n(1874).Z+"",width:"968",height:"505"})}),"\n",(0,i.jsx)(t.p,{children:"This mode renders the widget following the world transform of dialogue participants."}),"\n",(0,i.jsx)(t.p,{children:"When the current node being played in the dialogue widget is based on the Dialogue Node Base Context, it renders at the average position of the transforms of the speakers among the dialogue participants."}),"\n",(0,i.jsx)(t.h4,{id:"worlddynamic",children:"WorldDynamic"}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"Alt text",src:n(8151).Z+"",width:"962",height:"499"})}),"\n",(0,i.jsx)(t.p,{children:"This mode renders the widget at the specified world transform location."}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"Alt text",src:n(6457).Z+"",width:"620",height:"422"})}),"\n",(0,i.jsxs)(t.p,{children:["You can use the ",(0,i.jsx)(t.strong,{children:"SetRenderingTargetTransform"})," function to specify the interpolation target transform (it will render directly to this location if lagging is turned off) and the ",(0,i.jsx)(t.strong,{children:"RenderWidgetAtTransform"})," function to immediately change the rendering position to the specified transform."]}),"\n",(0,i.jsx)(t.h4,{id:"screen",children:"Screen"}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"Alt text",src:n(6801).Z+"",width:"970",height:"508"})}),"\n",(0,i.jsx)(t.p,{children:"This mode renders the widget at a given screen-relative coordinate."}),"\n",(0,i.jsx)(t.p,{children:"Screen coordinates represent the screen's coordinates as numbers ranging from 0 to 1, treating the left-top corner as (-1, -1), the center as (0, 0), and the right-bottom corner as (1, 1)."}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"Alt text",src:n(4513).Z+"",width:"687",height:"552"})}),"\n",(0,i.jsxs)(t.p,{children:["You can use the ",(0,i.jsx)(t.strong,{children:"SetRenderingTargetScreenCoordinate"})," function to specify the interpolation target screen coordinate (it will render directly to this location if lagging is turned off) and the ",(0,i.jsx)(t.strong,{children:"RenderWidgetAtScreenCoordinate"})," and ",(0,i.jsx)(t.strong,{children:"RenderWidgetAtScreenLocation(It takes the viewport location directly)"})," function and to immediately change the rendering position to the specified location on screen."]}),"\n",(0,i.jsx)(t.p,{children:"Additionally, there is a variable called ScreenSpaceDepthOffset, indicating how far from the screen the widget is rendered when in screen mode."}),"\n",(0,i.jsx)(t.admonition,{type:"warning",children:(0,i.jsx)(t.p,{children:"To achieve smooth interpolation during mode transitions, it is recommended to set ScreenSpaceDepthOffset larger than 300."})}),"\n",(0,i.jsxs)(t.admonition,{type:"tip",children:[(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"WB_SpeechBubble"})," asset automatically expend the widget wider when the current mode is screen."]}),(0,i.jsxs)(t.p,{children:["If you don't want this behavior, set the value of ",(0,i.jsx)(t.strong,{children:"bShouldChangeToLetterBoxOnScreenMode"})," property to false."]}),(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"Alt text",src:n(7393).Z+"",width:"447",height:"234"})})]}),"\n",(0,i.jsx)(t.h4,{id:"addition-smooth-mode-transition",children:"Addition: Smooth Mode Transition"}),"\n",(0,i.jsxs)(t.p,{children:["It supports built-in animations for a more natural widget render-type-mode transition. The provided ",(0,i.jsx)(t.strong,{children:"WB_SpeechBubble"})," widget, sample asset that is included in the plugin, expands the widget through animations when the mode changes using the ",(0,i.jsx)(t.strong,{children:"SetMode"})," function. It displays the widget as a fixed text box below the screen when in screen mode. Additionally, it automatically adjusts the wrapping logic of the text to fit the expanded text box size."]}),"\n",(0,i.jsx)(t.p,{children:"If you don't want this feature, you can remove the logic in the blueprint to prevent animation playback when changing the mode."}),"\n",(0,i.jsx)(t.h3,{id:"rendering-clamping",children:"Rendering Clamping"}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"Alt text",src:n(2811).Z+"",width:"966",height:"509"})}),"\n",(0,i.jsxs)(t.p,{children:["The widget includes a feature that allows you to specify how much the widget can extend beyond the screen. When the variable ",(0,i.jsx)(t.strong,{children:"bShouldClampRenderLocation"})," is true, clamping is activated, and the degree of clamping into the screen changes based on the ",(0,i.jsx)(t.strong,{children:"RenderLocationClampMargin"})," property. And specify the ",(0,i.jsx)(t.strong,{children:"RenderLocationClampTargetSlateName"})," property to the name of the layout widget that you want to use on the clamping calculations. (it will assume the size of the whole widget with the provided layout widget.)"]}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"Alt text",src:n(4928).Z+"",width:"633",height:"144"})}),"\n",(0,i.jsx)(t.h3,{id:"rendering-lagging",children:"Rendering Lagging"}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"Alt text",src:n(7039).Z+"",width:"501",height:"144"})}),"\n",(0,i.jsx)(t.p,{children:"This feature interpolates between the new and old transforms of the widget when the rendering transform / coordinate changes."}),"\n",(0,i.jsxs)(t.p,{children:["When the rendering mode is ",(0,i.jsx)(t.strong,{children:"WorldFollow"})," or ",(0,i.jsx)(t.strong,{children:"WorldDynamic"}),", and the value of ",(0,i.jsx)(t.strong,{children:"bShouldApplyTransformLag"})," is true, interpolation is applied to the world transform change. Adjust the ",(0,i.jsx)(t.strong,{children:"TargetTransformInterpolationLagAmount"})," to control the interpolation strength."]}),"\n",(0,i.jsxs)(t.p,{children:["When the rendering mode is ",(0,i.jsx)(t.strong,{children:"Screen"})," and the value of ",(0,i.jsx)(t.strong,{children:"bShouldApplyScreenCoordinateLag"})," is true, interpolation is applied to the screen coordinate change. Adjust the ",(0,i.jsx)(t.strong,{children:"TargetScreenCoordinateInterpolationLagAmount"})," to control the interpolation strength."]}),"\n",(0,i.jsx)(t.p,{children:"This interpolation feature also applies when changing modes, supporting smooth transitions between each mode."}),"\n",(0,i.jsx)(t.h3,{id:"edge-blur-feature",children:"Edge Blur Feature"}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"Alt text",src:n(2811).Z+"",width:"966",height:"509"})}),"\n",(0,i.jsx)(t.p,{children:"This feature automatically reduces the transparency of the widget when the widget's rendering transform goes too far beyond the screen's corners."}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"Alt text",src:n(6681).Z+"",width:"493",height:"136"})}),"\n",(0,i.jsxs)(t.p,{children:["Set ",(0,i.jsx)(t.strong,{children:"bShouldBlurOnTheEdge"})," to true to enable this feature, and adjust ",(0,i.jsx)(t.strong,{children:"BlurOnTheEdgeStartDistance"})," and ",(0,i.jsx)(t.strong,{children:"BlurOnTheEdgeEndDistance"})," to adjust the distance where this effect will start and end. also adjust ",(0,i.jsx)(t.strong,{children:"BlurOnTheEdgeMinAlpha"})," to set the mininum value of the alpha that this feature can drop to."]}),"\n",(0,i.jsx)(t.h3,{id:"hide-on-behind-the-object-feature",children:"Hide On Behind The Object Feature"}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"Alt text",src:n(9767).Z+"",width:"907",height:"442"})}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"Alt text",src:n(4393).Z+"",width:"644",height:"431"})}),"\n",(0,i.jsx)(t.p,{children:"This feature reduces the transparency of the widget when there is an object between the widget and the player."}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"Alt text",src:n(8826).Z+"",width:"532",height:"194"})}),"\n",(0,i.jsxs)(t.p,{children:["set ",(0,i.jsx)(t.strong,{children:"bShouldHideWhenWidgetIsBlocked"})," to true to enable this feature, also adjust ",(0,i.jsx)(t.strong,{children:"HideMinAlpha"})," to set the mininum value of the alpha that this feature can drop to."]}),"\n",(0,i.jsxs)(t.p,{children:["Change the ",(0,i.jsx)(t.strong,{children:"HideSphereRadius"})," and ",(0,i.jsx)(t.strong,{children:"HideTraceChannelName"})," to set the radius of the trace sphere ray, and specify the channel to perform the trace.\r\nAlso if you need to see the visual debug ray of the hide trace, then change the value of the ",(0,i.jsx)(t.strong,{children:"HideTraceDebugDrawMethod"})," property to something else than None."]}),"\n",(0,i.jsx)(t.h3,{id:"advanced-opacity-interpolation",children:"Advanced Opacity Interpolation"}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"Alt text",src:n(6942).Z+"",width:"495",height:"170"})}),"\n",(0,i.jsx)(t.p,{children:"This feature applies lag and interpolation to the opacity of the widget, providing a smooth interpolation effect."}),"\n",(0,i.jsx)(t.p,{children:"Descriptions for each property is as following."}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Property"}),(0,i.jsx)(t.th,{children:"Description"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"RenderTargetOpacity"}),(0,i.jsx)(t.td,{children:"The target opacity that the current opacity will interpolated to."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"TargetOpacityInterpolationLagAmount"}),(0,i.jsx)(t.td,{children:"The amount of the lag that will be applied on the rendering interpolation of the opacity."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"OpacityCheckThreshold"}),(0,i.jsx)(t.td,{children:"The threshold value for the bIsOpacityLowerThanOpacityCheckThreshold. bIsOpacityLowerThanOpacityCheckThreshold will be false if the opacity of the widget is lower than this value. This is useful when you want to disable some of the action when the opacity of the widget is way too below. (ex, skip action, focusing)"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"bShouldApplyRenderOpacityLag"}),(0,i.jsx)(t.td,{children:"Whether to enable the opacity lag feature."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"bIsOpacityLowerThanOpacityCheckThreshold"}),(0,i.jsx)(t.td,{children:"Whether the widget's opacity value is lower than the threshold value for OpacityCheckThreshold. This is useful when you want to disable some of the action when the opacity of the widget is way too below. (ex, skip action, focusing)"})]})]})]})]})}function c(e={}){const{wrapper:t}={...(0,s.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},8151:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/image-1-6ac971d6928ac249bda1652fbe8dc657.png"},7039:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/image-10-f67705099650029bd010096e35f4a4a4.png"},6681:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/image-11-a5926b7cd12f5d10e54400026e22710b.png"},4393:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/image-12-126bd7184b78fd3a5fe2b984b997e8d4.png"},9767:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/image-13-2be8a618eeb7f71d3ddbc6fd99838dfc.png"},8826:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/image-14-89c46a8ed381809fc6069c65345399b8.png"},6942:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/image-15-72f45f932555c8b64e62b7c763c432f4.png"},6801:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/image-2-8e0f0a6379b58ed57511b5e9b55bd790.png"},8279:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/image-3-8c30913274d9a2f17528262924771a54.png"},1585:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/image-4-b2467317f56b3d624ae7d8404b00b08a.png"},4513:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/image-5-83fc06af9f27b71f26a8067ca966c050.png"},6457:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/image-6-9489e986cf629750d6e77fea97ddfb8b.png"},7393:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/image-7-f46eb4b1374433ff84334f5f681351c1.png"},2811:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/image-8-e4eebf3c606e6900fdc9369d1db1f5e2.png"},4928:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/image-9-16a7d4418d698cff812e9399dae09e94.png"},1874:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/image-f76b5319238cf12745d4ff274b9918c5.png"},1151:(e,t,n)=>{n.d(t,{Z:()=>d,a:()=>r});var i=n(7294);const s={},a=i.createContext(s);function r(e){const t=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(a.Provider,{value:t},e.children)}}}]);